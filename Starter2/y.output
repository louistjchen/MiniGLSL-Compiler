Terminals unused in grammar

   '&'


Rules useless in parser due to conflicts

   10 declaration: %empty


State 4 conflicts: 7 shift/reduce, 6 reduce/reduce
State 71 conflicts: 13 shift/reduce
State 82 conflicts: 1 shift/reduce
State 83 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | %empty

    5 statements: statements statement
    6           | %empty

    7 declaration: type ID ';'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression ';'
   10            | %empty

   11 statement: variable '=' expression ';'
   12          | IF '(' expression ')' statement else_statement
   13          | WHILE '(' expression ')' statement
   14          | scope
   15          | ';'

   16 else_statement: ELSE statement
   17               | %empty

   18 type: INT_T
   19     | IVEC_T
   20     | BOOL_T
   21     | BVEC_T
   22     | FLOAT_T
   23     | VEC_T

   24 expression: constructor
   25           | function
   26           | INT_C
   27           | FLOAT_C
   28           | variable
   29           | unary_op expression
   30           | expression binary_op expression
   31           | TRUE_C
   32           | FALSE_C
   33           | '(' expression ')'

   34 variable: ID
   35         | ID '[' INT_C ']'

   36 unary_op: '!'
   37         | '-'

   38 binary_op: AND
   39          | OR
   40          | EQ
   41          | NEQ
   42          | '<'
   43          | LEQ
   44          | '>'
   45          | GEQ
   46          | '+'
   47          | '-'
   48          | '*'
   49          | '/'
   50          | '^'

   51 constructor: type '(' arguments ')'

   52 function: FUNC '(' arguments_opt ')'

   53 arguments_opt: arguments
   54              | %empty

   55 arguments: arguments ',' expression
   56          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33) 36
'&' (38)
'(' (40) 12 13 33 51 52
')' (41) 12 13 33 51 52
'*' (42) 48
'+' (43) 46
',' (44) 55
'-' (45) 37 47
'/' (47) 49
';' (59) 7 8 9 11 15
'<' (60) 42
'=' (61) 8 9 11
'>' (62) 44
'[' (91) 35
']' (93) 35
'^' (94) 50
'{' (123) 2
'}' (125) 2
error (256)
FLOAT_T (258) 22
INT_T (259) 18
BOOL_T (260) 20
CONST (261) 9
FALSE_C (262) 32
TRUE_C (263) 31
IF (264) 12
WHILE (265) 13
ELSE (266) 16
AND (267) 38
OR (268) 39
NEQ (269) 41
EQ (270) 40
LEQ (271) 43
GEQ (272) 45
VEC_T (273) 23
BVEC_T (274) 21
IVEC_T (275) 19
FLOAT_C (276) 27
INT_C (277) 26 35
FUNC (278) 52
ID (279) 7 8 9 34 35
UMINUS (280)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1, on right: 0
scope (46)
    on left: 2, on right: 1 14
declarations (47)
    on left: 3 4, on right: 2 3
statements (48)
    on left: 5 6, on right: 2 5
declaration (49)
    on left: 7 8 9 10, on right: 3
statement (50)
    on left: 11 12 13 14 15, on right: 5 12 13 16
else_statement (51)
    on left: 16 17, on right: 12
type (52)
    on left: 18 19 20 21 22 23, on right: 7 8 9 51
expression (53)
    on left: 24 25 26 27 28 29 30 31 32 33, on right: 8 9 11 12 13
    29 30 33 55 56
variable (54)
    on left: 34 35, on right: 11 28
unary_op (55)
    on left: 36 37, on right: 29
binary_op (56)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49 50, on right: 30
constructor (57)
    on left: 51, on right: 24
function (58)
    on left: 52, on right: 25
arguments_opt (59)
    on left: 53 54, on right: 52
arguments (60)
    on left: 55 56, on right: 51 53 55


State 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


State 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: scope .

    $default  reduce using rule 1 (program)


State 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    FLOAT_T   [reduce using rule 10 (declaration)]
    INT_T     [reduce using rule 10 (declaration)]
    BOOL_T    [reduce using rule 10 (declaration)]
    CONST     [reduce using rule 10 (declaration)]
    IF        reduce using rule 6 (statements)
    IF        [reduce using rule 10 (declaration)]
    WHILE     reduce using rule 6 (statements)
    WHILE     [reduce using rule 10 (declaration)]
    VEC_T     [reduce using rule 10 (declaration)]
    BVEC_T    [reduce using rule 10 (declaration)]
    IVEC_T    [reduce using rule 10 (declaration)]
    ID        reduce using rule 6 (statements)
    ID        [reduce using rule 10 (declaration)]
    '{'       reduce using rule 6 (statements)
    '{'       [reduce using rule 10 (declaration)]
    '}'       reduce using rule 6 (statements)
    '}'       [reduce using rule 10 (declaration)]
    ';'       reduce using rule 6 (statements)
    ';'       [reduce using rule 10 (declaration)]
    $default  reduce using rule 6 (statements)

    statements   go to state 13
    declaration  go to state 14
    type         go to state 15


State 5

    0 $accept: program $end .

    $default  accept


State 6

   22 type: FLOAT_T .

    $default  reduce using rule 22 (type)


State 7

   18 type: INT_T .

    $default  reduce using rule 18 (type)


State 8

   20 type: BOOL_T .

    $default  reduce using rule 20 (type)


State 9

    9 declaration: CONST . type ID '=' expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    type  go to state 16


State 10

   23 type: VEC_T .

    $default  reduce using rule 23 (type)


State 11

   21 type: BVEC_T .

    $default  reduce using rule 21 (type)


State 12

   19 type: IVEC_T .

    $default  reduce using rule 19 (type)


State 13

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    '}'    shift, and go to state 20
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 23
    variable   go to state 24


State 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


State 15

    7 declaration: type . ID ';'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 25


State 16

    9 declaration: CONST type . ID '=' expression ';'

    ID  shift, and go to state 26


State 17

   12 statement: IF . '(' expression ')' statement else_statement

    '('  shift, and go to state 27


State 18

   13 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 28


State 19

   34 variable: ID .
   35         | ID . '[' INT_C ']'

    '['  shift, and go to state 29

    $default  reduce using rule 34 (variable)


State 20

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


State 21

   15 statement: ';' .

    $default  reduce using rule 15 (statement)


State 22

   14 statement: scope .

    $default  reduce using rule 14 (statement)


State 23

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


State 24

   11 statement: variable . '=' expression ';'

    '='  shift, and go to state 30


State 25

    7 declaration: type ID . ';'
    8            | type ID . '=' expression ';'

    '='  shift, and go to state 31
    ';'  shift, and go to state 32


State 26

    9 declaration: CONST type ID . '=' expression ';'

    '='  shift, and go to state 33


State 27

   12 statement: IF '(' . expression ')' statement else_statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 43
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 28

   13 statement: WHILE '(' . expression ')' statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 48
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 29

   35 variable: ID '[' . INT_C ']'

    INT_C  shift, and go to state 49


State 30

   11 statement: variable '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 50
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 31

    8 declaration: type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 51
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 32

    7 declaration: type ID ';' .

    $default  reduce using rule 7 (declaration)


State 33

    9 declaration: CONST type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 52
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 34

   32 expression: FALSE_C .

    $default  reduce using rule 32 (expression)


State 35

   31 expression: TRUE_C .

    $default  reduce using rule 31 (expression)


State 36

   27 expression: FLOAT_C .

    $default  reduce using rule 27 (expression)


State 37

   26 expression: INT_C .

    $default  reduce using rule 26 (expression)


State 38

   52 function: FUNC . '(' arguments_opt ')'

    '('  shift, and go to state 53


State 39

   37 unary_op: '-' .

    $default  reduce using rule 37 (unary_op)


State 40

   36 unary_op: '!' .

    $default  reduce using rule 36 (unary_op)


State 41

   33 expression: '(' . expression ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 54
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 42

   51 constructor: type . '(' arguments ')'

    '('  shift, and go to state 55


State 43

   12 statement: IF '(' expression . ')' statement else_statement
   30 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 69

    binary_op  go to state 70


State 44

   28 expression: variable .

    $default  reduce using rule 28 (expression)


State 45

   29 expression: unary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 71
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 46

   24 expression: constructor .

    $default  reduce using rule 24 (expression)


State 47

   25 expression: function .

    $default  reduce using rule 25 (expression)


State 48

   13 statement: WHILE '(' expression . ')' statement
   30 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 72

    binary_op  go to state 70


State 49

   35 variable: ID '[' INT_C . ']'

    ']'  shift, and go to state 73


State 50

   11 statement: variable '=' expression . ';'
   30 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 74

    binary_op  go to state 70


State 51

    8 declaration: type ID '=' expression . ';'
   30 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 75

    binary_op  go to state 70


State 52

    9 declaration: CONST type ID '=' expression . ';'
   30 expression: expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 76

    binary_op  go to state 70


State 53

   52 function: FUNC '(' . arguments_opt ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    $default  reduce using rule 54 (arguments_opt)

    type           go to state 42
    expression     go to state 77
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    arguments_opt  go to state 78
    arguments      go to state 79


State 54

   30 expression: expression . binary_op expression
   33           | '(' expression . ')'

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 80

    binary_op  go to state 70


State 55

   51 constructor: type '(' . arguments ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 77
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47
    arguments    go to state 81


State 56

   38 binary_op: AND .

    $default  reduce using rule 38 (binary_op)


State 57

   39 binary_op: OR .

    $default  reduce using rule 39 (binary_op)


State 58

   41 binary_op: NEQ .

    $default  reduce using rule 41 (binary_op)


State 59

   40 binary_op: EQ .

    $default  reduce using rule 40 (binary_op)


State 60

   43 binary_op: LEQ .

    $default  reduce using rule 43 (binary_op)


State 61

   45 binary_op: GEQ .

    $default  reduce using rule 45 (binary_op)


State 62

   42 binary_op: '<' .

    $default  reduce using rule 42 (binary_op)


State 63

   44 binary_op: '>' .

    $default  reduce using rule 44 (binary_op)


State 64

   46 binary_op: '+' .

    $default  reduce using rule 46 (binary_op)


State 65

   47 binary_op: '-' .

    $default  reduce using rule 47 (binary_op)


State 66

   48 binary_op: '*' .

    $default  reduce using rule 48 (binary_op)


State 67

   49 binary_op: '/' .

    $default  reduce using rule 49 (binary_op)


State 68

   50 binary_op: '^' .

    $default  reduce using rule 50 (binary_op)


State 69

   12 statement: IF '(' expression ')' . statement else_statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 82
    variable   go to state 24


State 70

   30 expression: expression binary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 83
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 71

   29 expression: unary_op expression .
   30           | expression . binary_op expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    AND       [reduce using rule 29 (expression)]
    OR        [reduce using rule 29 (expression)]
    NEQ       [reduce using rule 29 (expression)]
    EQ        [reduce using rule 29 (expression)]
    LEQ       [reduce using rule 29 (expression)]
    GEQ       [reduce using rule 29 (expression)]
    '<'       [reduce using rule 29 (expression)]
    '>'       [reduce using rule 29 (expression)]
    '+'       [reduce using rule 29 (expression)]
    '-'       [reduce using rule 29 (expression)]
    '*'       [reduce using rule 29 (expression)]
    '/'       [reduce using rule 29 (expression)]
    '^'       [reduce using rule 29 (expression)]
    $default  reduce using rule 29 (expression)

    binary_op  go to state 70


State 72

   13 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 84
    variable   go to state 24


State 73

   35 variable: ID '[' INT_C ']' .

    $default  reduce using rule 35 (variable)


State 74

   11 statement: variable '=' expression ';' .

    $default  reduce using rule 11 (statement)


State 75

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


State 76

    9 declaration: CONST type ID '=' expression ';' .

    $default  reduce using rule 9 (declaration)


State 77

   30 expression: expression . binary_op expression
   56 arguments: expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 56 (arguments)

    binary_op  go to state 70


State 78

   52 function: FUNC '(' arguments_opt . ')'

    ')'  shift, and go to state 85


State 79

   53 arguments_opt: arguments .
   55 arguments: arguments . ',' expression

    ','  shift, and go to state 86

    $default  reduce using rule 53 (arguments_opt)


State 80

   33 expression: '(' expression ')' .

    $default  reduce using rule 33 (expression)


State 81

   51 constructor: type '(' arguments . ')'
   55 arguments: arguments . ',' expression

    ')'  shift, and go to state 87
    ','  shift, and go to state 86


State 82

   12 statement: IF '(' expression ')' statement . else_statement

    ELSE  shift, and go to state 88

    ELSE      [reduce using rule 17 (else_statement)]
    $default  reduce using rule 17 (else_statement)

    else_statement  go to state 89


State 83

   30 expression: expression . binary_op expression
   30           | expression binary_op expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    AND       [reduce using rule 30 (expression)]
    OR        [reduce using rule 30 (expression)]
    NEQ       [reduce using rule 30 (expression)]
    EQ        [reduce using rule 30 (expression)]
    LEQ       [reduce using rule 30 (expression)]
    GEQ       [reduce using rule 30 (expression)]
    '<'       [reduce using rule 30 (expression)]
    '>'       [reduce using rule 30 (expression)]
    '+'       [reduce using rule 30 (expression)]
    '-'       [reduce using rule 30 (expression)]
    '*'       [reduce using rule 30 (expression)]
    '/'       [reduce using rule 30 (expression)]
    '^'       [reduce using rule 30 (expression)]
    $default  reduce using rule 30 (expression)

    binary_op  go to state 70


State 84

   13 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 13 (statement)


State 85

   52 function: FUNC '(' arguments_opt ')' .

    $default  reduce using rule 52 (function)


State 86

   55 arguments: arguments ',' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 36
    INT_C    shift, and go to state 37
    FUNC     shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type         go to state 42
    expression   go to state 90
    variable     go to state 44
    unary_op     go to state 45
    constructor  go to state 46
    function     go to state 47


State 87

   51 constructor: type '(' arguments ')' .

    $default  reduce using rule 51 (constructor)


State 88

   16 else_statement: ELSE . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 91
    variable   go to state 24


State 89

   12 statement: IF '(' expression ')' statement else_statement .

    $default  reduce using rule 12 (statement)


State 90

   30 expression: expression . binary_op expression
   55 arguments: arguments ',' expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 55 (arguments)

    binary_op  go to state 70


State 91

   16 else_statement: ELSE statement .

    $default  reduce using rule 16 (else_statement)
