---------------------------------------------------------------------------------
CSC467 - Compilers and Interpreters
Team Report
---------------------------------------------------------------------------------
Louis Chen - 1000303502
Juntu Chen - 1000659799
---------------------------------------------------------------------------------
This report shows the team's approach to finishing the MiniGLSL Shader Compiler.
---------------------------------------------------------------------------------


1. How did we implement non-trivial math operations?

 - For "+" "-" "*" "^", we use available ARB opcodes (ADD, SUB, MUL, POW).
 - For "/", we first take the reciprocal of the divider (RCP), and then multiply with it.
 - For "&&", we define booleans to be 1.0 for true and 0.0 for false, therefore we can
   simply multiply the two and achieve AND.
 - For "||", we first add the two operands. Since boolean is defined 0.0/1.0, the result
   can be 0.0/1.0/2.0. Therefore we subtract the result by 1.0 to achieve OR.
 - For "==", we subtract the 1st operand with the 2nd, and vice versa. We compare the two
   results to see if both are greater than or equal to zero (CMP).
 - For "!=", similar to "==".
 - For "<", we subtract the 1st operand with the 2nd. If the result if less than zero, we
   know the boolean is true.
 - For ">" "<=" ">=", similar to "<".


2. How did we handle boolean types?

 - We define boolean true to be 1.0, and false to be 0.0.
 - We need the values to be in floating point form because of provided register type.
 - Whenever we need to determine whether a boolean is true or false, we first subtract
   boolean register with 1.0, and use CMP as CMP only defines "<0" or ">=0" conditions.


3. How did we implement if statements?

 - Before generating code for the instructions, we first perform a genCondRecursion().
 - This function basically traverses AST tree, and assigns a condition register (condReg)
   to every AST node. It traverses in a pre-order manner.
 - If the current AST's kind is not an if/if_else statement, the function will simply
   assign current AST's condReg to its child node(s)'s condReg.
 - If the current AST's kind is an if/if_else statement, it will compute the condition
   expression and store it into a condition buffer register (condBuf).
    - For IF, it will take condBuf, AND it with current AST's condReg, and assign the
      result to statement_valid's condReg.
    - For ELSE, it will take condBuf, AND its complement with current AST's condReg, and
      assign the result to statement_invalid's condReg.
 - By doing so, we ease the problem in the actual code generation stage by simply taking
   current AST's condReg and perform a CMP assignment, given that all condRegs are assigned
   beforehand (before actual instruction code generation)
 - This means in the final assembly code, there will be two sections: 1 condition register
   allocation/assignment, 1 instruction code generation.


4. How did we implement constants?

 - For constants that are within an expression, we declare a register for that constant.
   (e.g. TEMP r1; MOV r1, 1.0;)
 - For constants that are within ARGUMENTS_OPT, we assign the constant directly to its
   wrapper. This wrapper can be a constructor, or a function.
   (e.g. TEMP function; MOV function, {1.0, 2.0};)
 - For integers, we need to append ".0" to convert it into a float.
 - For booleans, we need to append ".0" to convert it into a float.
 - For float, we simply assign it.

5. How the code for each type of node was generated?

 - Broadly speaking, a node can either be a declaration, assignment, or expression node
   regardless of the existence of a condition (if/if_else).
 - For declaration node, such as declaration, declaration_assign, declaration_assign_const,
   we always allocate a register for it first. We use "TEMP" for declaration, followed by
   "MOV" for declaration_assign and declaration_assign_const. We could have used "PARAM"
   for declaration_assign_const, but due to our code structure, it is easier to use "MOV".
   However, we are certain that declaration_assign_const always assigns a value that is
   known at compile-time, checked by semantic checking stage.
 - For assignment node, we first search for the assigned variable's register name in our
   linked-list. We then run recursion on the given expression node. Once the recursion is
   finished, we fetch its temp register name. Depending on the current AST's condReg, we
   use either "MOV" or "CMP" to complete the assignment.
 - For expression node, such as binary operations, unary, and so on, we first allocate
   a temp register for this current expression, and run recursion on the inner expression
   nodes, if any. Once the recursion is finished, we then print out a set of ARB assembly
   opcodes according to different types of expression.
 - We have a global register counter, called regNum. It is initialized to 0, and incremented
   upon register allocation request. Some register naming conventions we have used:
    - For declared variables:		r<regNum>var
    - For temp expression wrappers:	r<regNum>tmp
    - For condition registers:		cond_<scopeLevel>_<scopeIndex>
    - For condition buffer:		condBuf
 - Briefly describing our "absolute scope number system", we have 2 variables, "scopeLevel"
   and "scopeIndex", in every AST node.
    - scopeLevel: this is the scope depth
    - scopeIndex: this is the parallel index within a scope depth
   With <scopeLevel, scopeIndex>, we can define the absolute scope for every declared variable.
   This prevents the issue of having or not having {} within an if/else statment or not.


