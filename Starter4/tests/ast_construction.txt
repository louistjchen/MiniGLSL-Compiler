/*ast construction/printing checking: code demonstrating all parts of grammer in parser.y correctly*/
{


	/*declarations*/

	/*type ID ';'*/
	int any;
	
	/*type ID '=' expression ';'*/
	int int1 = 52;
	int int2 = int(12); 	/*1 arg, int constructor*/
	float float1 = -0.3; 	/*unary expression*/
	bool bool1 = !true; 	/*unary expression*/
	vec2 myVec = vec2(2.0,3.0);
	vec3 myVec3 = vec3(2.0,3.0,0.0);
	vec4 myVec4 = vec4();	/*arguments_opt is epsilon -> default values should be set to 0 as per MiniGSL language*/
	ivec3 myIvec3 = ivec3(1,2,3); 
	ivec4 myIvec4 = ivec4(1,2,3,4); 
	bvec4 myBvec = bvec4(true, true, true, false);

	/*CONST type ID '=' expression ';'*/
	const int constInt = 52;
	



	/*statements*/

	any = 12*2; any = any/2; any = (12-2); any = 12+int1; any = 2^2;
	float1 = rsq(any);

	if(myBvec[1]) ;
	else if(((bool1))){any = 5;}
	else any = 3;

	{
		/*test binary expressions*/
		bool1 = bool1 && true;
		myBvec[0] = bool1 != myBvec[1];
		int1 = myIvec3[2];
		any = 1;
		if((any<2)&&(any>0)&&(any>=-5)&&(any<=1)||(any==(222))) any=552;
		
		/*test functions*/
		float1 = rsq(float1) + rsq(int2) - (dp3(myVec3,myVec3) * dp3(myVec4,myVec4));
		int1 = dp3(myIvec3,myIvec3) - dp3(myIvec4,myIvec4);
		myVec4 = lit(myVec4);

	}
}
